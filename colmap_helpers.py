import numpy as np

colmap_poses = {
    '000236320812': np.array(
        [[9.99995703e-01, - 1.30696812e-03, - 2.62403348e-03, - 4.85492584e+00],
         [1.30671747e-03, 9.99999142e-01, - 9.72324683e-05, - 2.76190190e+00],
         [2.62415831e-03, 9.38031801e-05, 9.99996552e-01, 2.11866640e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]
    ),
    '000404613112': np.array(
        [[0.53206451, 0.0620448, - 0.8444275, 4.2861101],
         [-0.06871399, 0.99718605, 0.02997289, - 1.94213824],
         [0.84391098, 0.04207647, 0.53483066, 0.64024422],
         [0., 0., 0., 1.]]
    ),
    '000407313112': np.array(
        [[-7.91852643e-02, 1.81986328e-01, - 9.80107479e-01, 6.93644333e+00],
         [-3.67016104e-01, 9.08810544e-01, 1.98400038e-01, - 1.17361318e+00],
         [9.26838105e-01, 3.75425588e-01, - 5.17249001e-03, 3.16265359e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]
    ),
    '000558313112': np.array(
        [[0.91291681, - 0.0491824, 0.40517155, - 7.79868908],
         [0.08214781, 0.99453931, - 0.06436852, - 1.81735566],
         [-0.39979324, 0.09204706, 0.91197188, 4.42649365],
         [0., 0., 0., 1.]]
    ),
    '000951614712': np.array(
        [[0.7988739, 0.17106667, - 0.57665994, - 0.63248427],
         [-0.24142424, 0.96928485, - 0.04691707, 1.44876046],
         [0.5509218, 0.17670051, 0.81563601, - 0.10707786],
         [0., 0., 0., 1.]]
    )
}

condense_poses = {
    '000236320812': np.array(
        [[0.99493683, 0.00430855, 0.10040986, - 0.00203055],
         [-0.00526125, 0.99994361, 0.00922525, 0.03208157],
         [-0.10036445, - 0.00970683, 0.99490339, - 0.009813],
         [0., 0., 0., 1.]]
    ),
    '000404613112': np.array(
        [[0.61799791, 0.07676969, - 0.78242252, 2.05585496],
         [-0.0868117, 0.99579855, 0.02913732, 0.10735187],
         [0.78137207, 0.04991662, 0.62206593, 0.88675408],
         [0., 0., 0., 1.]]
    ),
    '000407313112': np.array(
        [[0.02454485, 0.19810367, - 0.9798737, 2.11648079],
         [-0.39957294, 0.90041491, 0.17203038, - 0.19936328],
         [0.91637274, 0.38730856, 0.10125742, 2.01313577],
         [0., 0., 0., 1.]]
    ),
    '000558313112': np.array(
        [[0.85868836, - 0.04838362, 0.51020911, - 0.984841],
         [0.08529922, 0.99514041, - 0.04918953, 0.35560483],
         [-0.50534973, 0.08575892, 0.85864257, 0.21906319],
         [0., 0., 0., 1.]]
    ),
    '000951614712': np.array(
        [[0.85387966, 0.18552539, - 0.48628167, 1.14218066],
         [-0.24509913, 0.9675622, - 0.06123571, 0.71780349],
         [0.45914698, 0.17147514, 0.87165379, 0.3036998],
         [0., 0., 0., 1.]]
    )
}

def compute_relative_pose(M_A, M_B):
    # Extract rotation and translation components
    R_A, T_A = M_A[:3, :3], M_A[:3, 3]
    R_B, T_B = M_B[:3, :3], M_B[:3, 3]

    # Compute inverse of R_A
    P = np.linalg.inv(R_A)

    # Construct relative pose matrix
    M_rel = np.eye(4)
    M_rel[:3, :3] = np.dot(R_B, P)
    M_rel[:3, 3] = np.dot(P, -T_A) + T_B

    return M_rel


print("{")
for x, cam in enumerate(list(colmap_poses.keys())):
    colmap_pose = colmap_poses[cam]
    condense_pose = condense_poses[cam]
    print(f"'{cam}': np.array( ", end="")
    rel = (compute_relative_pose(colmap_pose, condense_pose))
    print(f"[[{rel[0][0]}, {rel[0][1]}, {rel[0][2]}, {rel[0][3]}],[{rel[0][0]}, {rel[0][0]}, {rel[0][0]}, {rel[0][0]}],[{rel[0][0]}, {rel[0][0]}, {rel[0][0]}, {rel[0][0]}],[{rel[0][0]}, {rel[0][0]}, {rel[0][0]}, {rel[0][0]}]]")
    print(f"),", end="")

print("}")
